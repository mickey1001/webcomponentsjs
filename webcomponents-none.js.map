{"version":3,"sources":["webcomponents-none-index.js","bower_components/shadycss/src/css-parse.js","bower_components/shadycss/src/style-settings.js","bower_components/shadycss/src/style-util.js","bower_components/shadycss/src/style-properties.js","bower_components/shadycss/src/custom-style-element.js","bower_components/html-imports/src/html-imports-native.js","bower_components/shadycss/src/style-transformer.js","bower_components/shadycss/src/template-map.js","bower_components/shadycss/src/style-info.js","bower_components/shadycss/src/style-placeholder.js","bower_components/shadycss/src/apply-shim.js","bower_components/shadycss/src/document-watcher.js","bower_components/shadycss/src/ShadyCSS.js","bower_components/shadycss/src/style-cache.js","src/ready.js"],"names":["parse","text","clean","parseCss","lex","cssText","replace","RX","comments","port","root","start","end","length","n","i","l","OPEN_BRACE","rules","p","previous","parent","push","CLOSE_BRACE","node","t","substring","parsedCssText","trim","ss","_expandUnicodeEscapes","multipleSpaces","lastIndexOf","s","parsedSelector","selector","atRule","indexOf","AT_START","MEDIA_START","type","types","MEDIA_RULE","match","keyframesRule","KEYFRAMES_RULE","keyframesName","split","pop","VAR_START","MIXIN_RULE","STYLE_RULE","r$","r","code","arguments","repeat","stringify","preserveProperties","_hasMixinRules","removeCustomProps","removeCustomPropAssignment","removeCustomPropApply","customProp","mixinProp","mixinApply","varApply","parseSettings","settings","nativeCssVariables","shimcssproperties","nativeShadow","shimshadow","toCssText","callback","forEachRule","rulesForStyle","style","__cssRules","textContent","isKeyframesSelector","rule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","matchMedia","rx","MEDIA_MATCH","window","matches","applyCss","moniker","target","contextNode","createScopeStyle","applyStyle","document","head","after","nextSibling","firstChild","lastHeadApplyNode","insertBefore","createElement","setAttribute","applyStylePlaceHolder","placeHolder","createComment","scope","findMatchingParen","level","processVariableAndFallback","str","inner","prefix","suffix","comma","value","fallback","setElementClassRaw","element","ShadyDOM","nativeMethods","call","addToBitMask","bits","o","parseInt","enqueueDocumentValidation","enqueued","HTMLImports","whenReady","validateDocument","readyState","addEventListener","requestAnimationFrame","ShadyCSS","_elementsHaveApplied","updateStyles","once","removeEventListener","dispatchEvent","CustomEvent","cancelable","bubbles","useNative","importForElement","el","ownerDocument","inUse","navigator","userAgent","CSS","supports","WebComponents","flags","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","IS_VAR","BRACKETED","HOST_PREFIX","HOST_SUFFIX","SCOPE_NAME","StyleTransformer","dom","shouldRemoveScope","__styleScoped","_transformDom","nodeType","Node","ELEMENT_NODE","c$","localName","content","_content","childNodes","children","classList","remove","add","getAttribute","c","CLASS","newValue","StyleUtil.setElementClassRaw","elementStyles","styleRules","cssBuildType","__cssBuild","StyleUtil.toCssText","css","is","extends","ext","hostScope","_calcHostScope","_calcElementScope","self","isScoped","CSS_CLASS_PREFIX","_transformRule","_transformComplexSelector","transformer","transformedSelector","_transformRuleCss","p$","COMPLEX_SELECTOR_SEP","StyleUtil.isKeyframesSelector","join","stop","NTH","m","SLOTTED_START","HOST","SIMPLE_SELECTOR_SEP","info","_transformCompoundSelector","combinator","slottedIndex","SLOTTED","_transformHostSelector","_transformSimpleSelector","slotted","SLOTTED_PAREN","paren","DIR_PAREN","before","dir","PSEUDO_PREFIX","HOST_PAREN","SIMPLE_SELECTOR_PREFIX","typeSelector","SELECTOR_NO_MATCH","host","documentRule","normalizeRootSelector","_transformDocumentSelector","ROOT","SCOPE_DOC_SELECTOR","StyleTransformer$1","templateMap","promise","Promise","resolve","StyleInfo","get","__styleInfo","set","styleInfo","invalidate","elementName","_applyShimInvalid","startValidating","template","_validating","then","constructor","ast","placeholder","ownStylePropertyNames","typeExtension","cssBuild","overrideStyleProperties","styleProperties","scopeSelector","customStyle","Element","prototype","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","IS_IE","XSCOPE_NAME","StyleProperties","decorateStyles","props","keyframes","ruleIndex","StyleUtil.forEachRule","decorateRule","index","collectPropertiesInCssText","propertyInfo","_keyframes","names","properties","hasProperties","collectProperties","collectCssText","StyleUtil.rx","any","exec","Object","assign","collectConsumingCssText","name","reify","getOwnPropertyNames","valueForProperty","property","valueForProperties","StyleUtil.processVariableAndFallback","propertyValue","parts","lastIndex","colon","pp","slice","applyProperties","output","applyKeyframeTransforms","keyframeTransforms","input","hasAnimations","test","transform","keyframeNamesToTransform","keyframe","propertyDataFromStyles","selectorToMatch","key","whenHostOrRootRule","isRoot","isHost","hostAndRootPropertiesForScope","hostProps","rootProps","_element","transformStyles","hostSelector","rxHostSelector","hostRx","RegExp","_elementKeyframeTransforms","_scopeSelector","keyframesRules","_scopeKeyframes","_keyframesRuleTransformer","keyframesNameRx","transformedKeyframesName","scopeId","applyElementScopeSelector","old","v","applyElementStyle","_useCount","parentNode","removeChild","StyleUtil.applyCss","shadowRoot","StyleUtil.applyStyle","applyCustomStyle","StyleUtil.rulesForStyle","StyleProperties$1","placeholderMap","ce","customElements","origDefine","define","clazz","options","APPLY_NAME_CLEAN","INITIAL_INHERIT","MIXIN_VAR_SEP","MixinMap","_map","dependants","ApplyShim","_currentTemplate","_measureElement","_separator","_boundProduceCssProperties","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","detectMixin","has","transformStyle","transformRules","transformRule","transformCssText","_consumeCssProperties","_getInitialValueForProperty","all","appendChild","getComputedStyle","getPropertyValue","mixinName","idx","applyPos","afterApplyPos","textBeforeApply","textAfterApply","defaults","_cssTextToMap","replacement","_atApplyToCssProperties","fallbacks","vars","mixinEntry","f","_replaceInitialOrInherit","out","sp","_invalidateMixinEntry","mixinAsProperties","mixinValues","combinedProps","oldProps","create","needToInvalidate","applyShim","flush","elementNeedsScoping","contains","SVGElement","hasAttribute","handler","mxns","mxn","x","documentElement","addedNodes","getRootNode","DOCUMENT_FRAGMENT_NODE","removedNodes","classes","Array","from","classIdx","observer","MutationObserver","observe","childList","subtree","nativeCustomElements","delayedStart","body","listener","takeRecords","styleCache","typeMax","cache","_validate","cacheEntry","ownPropertyNames","pn","store","tagname","styleElement","list","shift","fetch","entry","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","nativeCss","nativeCssApply","watcherFlush","_generateScopeSelector","id","getStyleAst","styleAstToString","_gatherStyles","styles","querySelectorAll","_getCssBuild","querySelector","prepareTemplate","_prepared","hasMixins","_styleAst","_generateStaticStyle","_style","_ownPropertyNames","shadowroot","_prepareHost","_cssBuild","overrideProps","hasApplied","_isRootOwner","CustomStyle","CS","_documentDirty","findStyles","_revalidateApplyShim","_updateProperties","applyStyles","_updateNativeProperties","_applyStyleProperties","_applyToDescendants","_styleOwnerForNode","cachedScopeSelector","cachedStyle","oldScopeSelector","owner","ownerStyleInfo","ownerProperties","hostAndRootProps","propertyData","propertiesMatchingHost","_mixinOverrideStyles","overrides","removeProperty","setProperty","_transformCustomStyleForDocument","_applyCustomStyleToDocument","getComputedStyleValue","setElementClass","classString","scopeName","classAttr","k$","_styleInfoForNode","customStyles","hookFn","HTMLElement","_customStyles","processHook","fn","__appliedElement","attr","attributes"],"mappings":"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","file":"webcomponents-none.js","sourcesContent":["(function () {\n'use strict';\n\n(scope => {\n  'use strict';\n\n  const importForElement = el => {\n    return el.ownerDocument === document ? null : el.ownerDocument;\n  };\n  const whenReady = callback => {\n    // When native imports boot, the are \"ready\" the first rAF after\n    // the document becomes interactive, so wait for the correct state change.\n    if (document.readyState !== 'interactive') {\n      const once = () => {\n        document.removeEventListener('readystatechange', once);\n        window.HTMLImports.whenReady(callback);\n      };\n      document.addEventListener('readystatechange', once);\n    } else {\n      // TODO(sorvell): Ideally `whenReady` should return synchronously\n      // when imports are not pending but this would require a more\n      // robust implementation that should probably be a small complementary\n      // library available via the html-imports polyfill.\n      requestAnimationFrame(callback);\n    }\n  };\n\n  whenReady(() => document.dispatchEvent(new CustomEvent('HTMLImportsLoaded', {\n    cancelable: true,\n    bubbles: true\n  })));\n\n  // export\n  scope.useNative = true;\n  scope.whenReady = whenReady;\n  scope.importForElement = importForElement;\n})(window.HTMLImports = (window.HTMLImports || {}));\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n// given a string of css, return a simple rule tree\nfunction parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\nfunction lex(text) {\n  let root = {\n    start: 0,\n    end: text.length\n  };\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n.rules) {\n        n.rules = [];\n      }\n      let p = n;\n      let previous = p.rules[p.rules.length - 1];\n      n = {\n        start: i + 1,\n        parent: p,\n        previous: previous\n      };\n      p.rules.push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n.end = i + 1;\n      n = n.parent || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\nfunction parseCss(node, text) {\n  let t = text.substring(node.start, node.end - 1);\n  node.parsedCssText = node.cssText = t.trim();\n  if (node.parent) {\n    let ss = node.previous ? node.previous.end : node.parent.start;\n    t = text.substring(ss, node.start - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node.parsedSelector = node.selector = t.trim();\n    node.atRule = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node.atRule) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node.type = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node.type = types.KEYFRAMES_RULE;\n        node.keyframesName =\n          node.selector.split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node.type = types.MIXIN_RULE;\n      } else {\n        node.type = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node.rules;\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n// conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n// expanded form that doesn't require trailing space `\\000033`\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n// stringify parsed css.\nfunction stringify(node, preserveProperties, text) {\n  text = text || '';\n  // calc rule cssText\n  let cssText = '';\n  if (node.cssText || node.rules) {\n    let r$ = node.rules;\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node.cssText :\n        removeCustomProps(node.cssText);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node.selector) {\n      text += node.selector + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node.selector) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\nfunction _hasMixinRules(rules) {\n  return rules[0].selector.indexOf(VAR_START) === 0;\n}\n\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\nfunction removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\nlet types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n};\n\nlet OPEN_BRACE = '{';\nlet CLOSE_BRACE = '}';\n\n// helper regexp's\nlet RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n};\n\nlet VAR_START = '--';\nlet MEDIA_START = '@media';\nlet AT_START = '@';\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet nativeShadow = !(window.ShadyDOM && window.ShadyDOM.inUse);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nlet nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n// experimental support for native @apply\nfunction detectNativeApply() {\n  let style = document.createElement('style');\n  style.textContent = '.foo { @apply --foo }';\n  document.head.appendChild(style);\n  let nativeCssApply = (style.sheet.cssRules[0].cssText.indexOf('apply') >= 0);\n  document.head.removeChild(style);\n  return nativeCssApply;\n}\n\nlet nativeCssApply = false && detectNativeApply();\n\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings.shimcssproperties;\n    nativeShadow = nativeShadow && !settings.shimshadow;\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window.WebComponents) {\n  parseSettings(window.WebComponents.flags);\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nfunction toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\nfunction rulesForStyle(style) {\n  if (!style.__cssRules && style.textContent) {\n    style.__cssRules = parse(style.textContent);\n  }\n  return style.__cssRules;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\nfunction isKeyframesSelector(rule) {\n  return rule.parent &&\n  rule.parent.type === types.KEYFRAMES_RULE;\n}\n\nfunction forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  if (onlyActiveRules) {\n    if (node.type === types.MEDIA_RULE) {\n      let matchMedia = node.selector.match(rx.MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (node.type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    node.type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (node.type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node.rules;\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\nfunction applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\nfunction applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return target.insertBefore(style, after);\n}\n\nfunction createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\nfunction applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode.nextSibling : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n\n\n// cssBuildTypeForModule: function (module) {\n//   let dm = Polymer.DomModule.import(module);\n//   if (dm) {\n//     return getCssBuildType(dm);\n//   }\n// },\n//\n\n\n// Walk from text[start] matching parens\n// returns position of the outer end paren\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\nfunction setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window.ShadyDOM) {\n    window.ShadyDOM.nativeMethods.setAttribute.call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\nlet rx = {\n  VAR_ASSIGN: /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,\n  MIXIN_MATCH: /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n  VAR_CONSUMED: /(--[\\w-]+)\\s*([:,;)]|$)/gi,\n  ANIMATION_MATCH: /(animation\\s*:)|(animation-name\\s*:)/,\n  MEDIA_MATCH: /@media[^(]*(\\([^)]*\\))/,\n  IS_VAR: /^--/,\n  BRACKETED: /\\{[^}]*\\}/g,\n  HOST_PREFIX: '(?:^|[^.#[:])',\n  HOST_SUFFIX: '($|[.:[\\\\s>+~])'\n};\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node.__styleScoped) {\n      node.__styleScoped = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element.__cssBuild;\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = (nativeShadow || cssBuildType === 'shady') ?\n    toCssText(styleRules, callback) :\n    this.css(styleRules, element.is, element.extends, callback) + '\\n\\n';\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return toCssText(rules, function(rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? '[is=' +  scope + ']' : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  // transforms a css rule to a scoped rule.\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule.selector = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule.selector.split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule.selector = rule.parsedSelector;\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  normalizeRootSelector(rule) {\n    if (rule.selector === ROOT) {\n      rule.selector = 'html';\n    }\n  }\n\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nvar StyleTransformer$1 = new StyleTransformer();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nvar templateMap = {};\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nconst promise = Promise.resolve();\n\nclass StyleInfo {\n  static get(node) {\n    return node.__styleInfo;\n  }\n  static set(node, styleInfo) {\n    node.__styleInfo = styleInfo;\n    return styleInfo;\n  }\n  static invalidate(elementName) {\n    if (templateMap[elementName]) {\n      templateMap[elementName]._applyShimInvalid = true;\n    }\n  }\n  /*\n  the template is marked as `validating` for one microtask so that all instances\n  found in the tree crawl of `applyStyle` will update themselves,\n  but the template will only be updated once.\n  */\n  static startValidating(elementName) {\n    const template = templateMap[elementName];\n    if (!template._validating) {\n      template._validating = true;\n      promise.then(() => {\n        template._applyShimInvalid = false;\n        template._validating = false;\n      });\n    }\n  }\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    this.styleRules = ast || null;\n    this.placeholder = placeholder || null;\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    this.overrideStyleProperties = null;\n    this.elementName = elementName || '';\n    this.cssBuild = cssBuild || '';\n    this.typeExtension = typeExtension || '';\n    this.styleProperties = null;\n    this.scopeSelector = null;\n    this.customStyle = null;\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO: dedupe with shady\nconst p = window.Element.prototype;\nconst matchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n  // decorates styles with rule info and returns an array of used style\n  // property names\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule.rules = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx$$1 = rx.VAR_ASSIGN;\n      let cssText = rule.parsedCssText;\n      let value;\n      let any;\n      while ((m = rx$$1.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule.parsedCssText);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(rx.BRACKETED, '')\n      .replace(rx.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = rx.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        rx.MIXIN_MATCH.lastIndex = 0;\n        m = rx.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule.cssText = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule.cssText;\n    let output = rule.cssText;\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = rx.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule.cssText = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let hostScope = scope.is ?\n    StyleTransformer$1._calcHostScope(scope.is, scope.extends) :\n    'html';\n    let parsedSelector = rule.parsedSelector;\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer$1._transformRuleCss(\n          rule,\n          StyleTransformer$1._transformComplexSelector,\n          StyleTransformer$1._calcElementScope(scope.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules.__cssBuild;\n    forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let hostSelector = StyleTransformer$1\n      ._calcHostScope(element.is, element.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(rx.HOST_PREFIX + rxHostSelector +\n      rx.HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer$1.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !isKeyframesSelector(rule) &&\n          rule.cssText) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule.keyframesName] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n  // Transforms `@keyframes` names to be unique for the current host.\n  // Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule.keyframesName, 'g');\n    rule.transformedKeyframesName = rule.keyframesName + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    rule.selector = rule.transformedSelector.replace(\n        rule.keyframesName, rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule.selector = parts.join(',');\n  }\n\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      setElementClassRaw(element, v);\n    }\n  }\n\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s._useCount--;\n      if (s._useCount <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style._useCount = style._useCount || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style._useCount++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  applyCustomStyle(style, properties) {\n    let rules = rulesForStyle(style);\n    let self = this;\n    style.textContent = toCssText(rules, function(rule) {\n      let css = rule.cssText = rule.parsedCssText;\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(css);\n        // replace with reified properties, scenario is same as mixin\n        rule.cssText = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nvar StyleProperties$1 = new StyleProperties();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet placeholderMap = {};\n\nconst ce = window.customElements;\nif (ce && !nativeShadow) {\n  const origDefine = ce.define;\n  ce.define = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(ce, name, clazz, options);\n  };\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nclass StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    @apply --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\nlet MIXIN_MATCH = rx.MIXIN_MATCH;\nlet VAR_ASSIGN = rx.VAR_ASSIGN;\n\nlet APPLY_NAME_CLEAN = /;\\s*/m;\nlet INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nlet MIXIN_VAR_SEP = '_-_';\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    this._map = {};\n  }\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    };\n  }\n  get(name) {\n    name = name.trim();\n    return this._map[name];\n  }\n}\n\nclass ApplyShim {\n  constructor() {\n    this._currentTemplate = null;\n    this._measureElement = null;\n    this._map = new MixinMap();\n    this._separator = MIXIN_VAR_SEP;\n    this._boundProduceCssProperties = (\n      matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText, propertyName, valueProperty, valueMixin);\n  }\n  // return true if `cssText` contains a mixin definition or consumption\n  detectMixin(cssText) {\n    const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n    // reset state of the regexes\n    MIXIN_MATCH.lastIndex = 0;\n    VAR_ASSIGN.lastIndex = 0;\n    return has;\n  }\n  transformStyle(style, elementName) {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    return ast;\n  }\n  transformRules(rules, elementName) {\n    this._currentTemplate = templateMap[elementName];\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentTemplate = null;\n  }\n  transformRule(rule) {\n    rule.cssText = this.transformCssText(rule.parsedCssText);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule.selector === ':root') {\n      rule.selector = ':host > *';\n    }\n  }\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, this._boundProduceCssProperties);\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = document.createElement('meta');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  // replace mixin consumption with variable consumption\n  _consumeCssProperties(text) {\n    let m;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = [textBeforeApply, replacement, textAfterApply].join('');\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  // produce variable consumption at the site of mixin consumption\n  // @apply --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n  // Example:\n  // border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentTemplate) {\n        mixinEntry.dependants[this._currentTemplate.name] = this._currentTemplate;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = ApplyShim._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  // \"parse\" a mixin definition into a map of properties and values\n  // cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  _invalidateMixinEntry(mixinEntry) {\n    for (let elementName in mixinEntry.dependants) {\n      if (!this._currentTemplate || elementName !== this._currentTemplate.name) {\n        StyleInfo.invalidate(elementName);\n      }\n    }\n  }\n\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = '@apply ' + value + ';';\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(propertyName + MIXIN_VAR_SEP + p + ': ' + v);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = matchText + ';' + prefix;\n    }\n    return prefix + out.join('; ') + ';';\n  }\n}\n\nlet applyShim = new ApplyShim();\nwindow['ApplyShim'] = applyShim;\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer$1.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof SVGElement && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer$1.SCOPE_NAME) < 0)));\n  };\n\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = root.host;\n            if (host) {\n              let scope = host.is || host.localName;\n              StyleTransformer$1.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = mxn.removedNodes[i];\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer$1.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer$1.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  };\n  let nativeCustomElements = (window.customElements &&\n    !window.customElements.flush);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    };\n    // use polyfill timing if it's available\n    if (window.HTMLImports) {\n      window.HTMLImports.whenReady(delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          };\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  };\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO(dfreedm): consider spliting into separate global\nlet styleCache = new StyleCache();\n\nclass ShadyCSS {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo({rules: []}));\n    this._elementsHaveApplied = false;\n  }\n  get nativeShadow() {\n    return nativeShadow;\n  }\n  get nativeCss() {\n    return nativeCssVariables;\n  }\n  get nativeCssApply() {\n    return nativeCssApply;\n  }\n  flush() {\n    flush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!this.nativeShadow) {\n      StyleTransformer$1.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    let hasMixins = applyShim.detectMixin(cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && this.nativeCss && !this.nativeCssApply) {\n      applyShim.transformRules(ast, elementName);\n    }\n    template._styleAst = ast;\n\n    let ownPropertyNames = [];\n    if (!this.nativeCss) {\n      ownPropertyNames = StyleProperties$1.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || this.nativeCss) {\n      let root = this.nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer$1.elementStyles(info, rules);\n    if (cssText.length) {\n      return applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let is = host.getAttribute('is') || host.localName;\n    let typeExtension;\n    if (is !== host.localName) {\n      typeExtension = host.localName;\n    }\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  applyStyle(host, overrideProps) {\n    let is = host.getAttribute('is') || host.localName;\n    let styleInfo = StyleInfo.get(host);\n    let hasApplied = Boolean(styleInfo);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (window.CustomStyle) {\n      let CS = window.CustomStyle;\n      if (CS._documentDirty) {\n        CS.findStyles();\n        if (!this.nativeCss) {\n          this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n        } else if (!this.nativeCssApply) {\n          CS._revalidateApplyShim();\n        }\n        CS.applyStyles();\n        // if no elements have booted yet, we can just update the document and be done\n        if (!this._elementsHaveApplied) {\n          return;\n        }\n        // if no native css custom properties, we must recalculate the whole tree\n        if (!this.nativeCss) {\n          this.updateStyles();\n          /*\n          When updateStyles() runs, this element may not have a shadowroot yet.\n          If not, we need to make sure that this element runs `applyStyle` on itself at least once to generate a style\n          */\n          if (hasApplied) {\n            return;\n          }\n        }\n      }\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (this.nativeCss) {\n      if (styleInfo.overrideStyleProperties) {\n        this._updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._applyShimInvalid && template._style) {\n        // update template\n        if (!template._validating) {\n          applyShim.transformRules(template._styleAst, is);\n          template._style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          StyleInfo.startValidating(is);\n        }\n        // update instance if native shadowdom\n        if (this.nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    } else {\n      this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    }\n    if (hasApplied) {\n      let root = this._isRootOwner(host) ? host : host.shadowRoot;\n      // note: some elements may not have a root!\n      if (root) {\n        this._applyToDescendants(root);\n      }\n    }\n  }\n  _applyToDescendants(root) {\n    // note: fallback to childNodes to support recursing into SVG which\n    // does not support children in some browsers (Edge/IE)\n    let c$ = root.children || root.childNodes;\n    for (let i = 0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (c.shadowRoot) {\n        this.applyStyle(c);\n      }\n      this._applyToDescendants(c);\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = host.getAttribute('is') || host.localName;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties$1.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!this.nativeShadow) {\n      StyleProperties$1.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties$1.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties$1.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties;\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties$1.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  _updateNativeProperties(element, properties) {\n    // remove previous properties\n    for (let p in properties) {\n      // NOTE: for bc with shim, don't apply null values.\n      if (p === null) {\n        element.style.removeProperty(p);\n      } else {\n        element.style.setProperty(p, properties[p]);\n      }\n    }\n  }\n  updateStyles(properties) {\n    this.applyStyle(this._documentOwner, properties);\n  }\n  /* Custom Style operations */\n  _transformCustomStyleForDocument(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer$1.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer$1.documentRule(rule);\n      }\n      if (this.nativeCss && !this.nativeCssApply) {\n        applyShim.transformRule(rule);\n      }\n    });\n    if (this.nativeCss) {\n      style.textContent = toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (this.nativeCss && !this.nativeCssApply) {\n      let ast = rulesForStyle(style);\n      applyShim.transformRules(ast);\n      style.textContent = toCssText(ast);\n    }\n  }\n  _applyCustomStyleToDocument(style) {\n    if (!this.nativeCss) {\n      StyleProperties$1.applyCustomStyle(style, this._documentOwnerStyleInfo.styleProperties);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!this.nativeCss) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer$1.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer$1.SCOPE_NAME, scopeName);\n    }\n    if (!this.nativeCss) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties$1.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\nwindow['ShadyCSS'] = new ShadyCSS();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nWrapper over <style> elements to co-operate with ShadyCSS\n\nExample:\n<custom-style>\n  <style>\n  ...\n  </style>\n</custom-style>\n*/\n\nlet ShadyCSS$1 = window.ShadyCSS;\n\nlet enqueued = false;\n\nlet customStyles = [];\n\nlet hookFn = null;\n\n/*\nIf a page only has <custom-style> elements, it will flash unstyled content,\nas all the instances will boot asynchronously after page load.\n\nCalling ShadyCSS.updateStyles() will force the work to happen synchronously\n*/\nfunction enqueueDocumentValidation() {\n  if (enqueued) {\n    return;\n  }\n  enqueued = true;\n  if (window.HTMLImports) {\n    window.HTMLImports.whenReady(validateDocument);\n  } else if (document.readyState === 'complete') {\n    validateDocument();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      if (document.readyState === 'complete') {\n        validateDocument();\n      }\n    });\n  }\n}\n\nfunction validateDocument() {\n  requestAnimationFrame(() => {\n    if (enqueued || ShadyCSS$1._elementsHaveApplied) {\n      ShadyCSS$1.updateStyles();\n    }\n    enqueued = false;\n  });\n}\n\nclass CustomStyle extends HTMLElement {\n  static get _customStyles() {\n    return customStyles;\n  }\n  static get processHook() {\n    return hookFn;\n  }\n  static set processHook(fn) {\n    hookFn = fn;\n  }\n  static get _documentDirty() {\n    return enqueued;\n  }\n  static findStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (!c._style) {\n        let style = c.querySelector('style');\n        if (!style) {\n          continue;\n        }\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        if (style.__appliedElement) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            style.__appliedElement.setAttribute(attr.name, attr.value);\n          }\n        }\n        c._style = style.__appliedElement || style;\n        if (hookFn) {\n          hookFn(c._style);\n        }\n        ShadyCSS$1._transformCustomStyleForDocument(c._style);\n      }\n    }\n  }\n  static _revalidateApplyShim() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS$1._revalidateApplyShim(c._style);\n      }\n    }\n  }\n  static applyStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS$1._applyCustomStyleToDocument(c._style);\n      }\n    }\n    enqueued = false;\n  }\n  constructor() {\n    super();\n    customStyles.push(this);\n    enqueueDocumentValidation();\n  }\n}\n\nwindow['CustomStyle'] = CustomStyle;\nwindow.customElements.define('custom-style', CustomStyle);\n\n/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n  HTMLImports.whenReady(function() {\r\n    requestAnimationFrame(function() {\r\n      window.dispatchEvent(new CustomEvent('WebComponentsReady'));\r\n    });\r\n  });\r\n})();\n\n/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n/*\r\n * Polyfills loaded: None\r\n * Used in: Chrome\r\n */\r\n\r\n// TODO: This needs to not exist at all.\r\n\r\n// Lighter version of html-imports\r\n// TODO(notwaldorf): Remove after this is addressed:\r\n// https://github.com/webcomponents/shadycss/issues/46\n\n}());\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n// given a string of css, return a simple rule tree\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\nfunction lex(text) {\n  let root = {\n    start: 0,\n    end: text.length\n  };\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n.rules) {\n        n.rules = [];\n      }\n      let p = n;\n      let previous = p.rules[p.rules.length - 1];\n      n = {\n        start: i + 1,\n        parent: p,\n        previous: previous\n      };\n      p.rules.push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n.end = i + 1;\n      n = n.parent || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\nfunction parseCss(node, text) {\n  let t = text.substring(node.start, node.end - 1);\n  node.parsedCssText = node.cssText = t.trim();\n  if (node.parent) {\n    let ss = node.previous ? node.previous.end : node.parent.start;\n    t = text.substring(ss, node.start - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node.parsedSelector = node.selector = t.trim();\n    node.atRule = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node.atRule) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node.type = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node.type = types.KEYFRAMES_RULE;\n        node.keyframesName =\n          node.selector.split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node.type = types.MIXIN_RULE;\n      } else {\n        node.type = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node.rules;\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n// conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n// expanded form that doesn't require trailing space `\\000033`\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n// stringify parsed css.\nexport function stringify(node, preserveProperties, text) {\n  text = text || '';\n  // calc rule cssText\n  let cssText = '';\n  if (node.cssText || node.rules) {\n    let r$ = node.rules;\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node.cssText :\n        removeCustomProps(node.cssText);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node.selector) {\n      text += node.selector + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node.selector) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\nfunction _hasMixinRules(rules) {\n  return rules[0].selector.indexOf(VAR_START) === 0;\n}\n\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\nexport let types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nlet OPEN_BRACE = '{';\nlet CLOSE_BRACE = '}';\n\n// helper regexp's\nlet RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nlet VAR_START = '--';\nlet MEDIA_START = '@media';\nlet AT_START = '@';\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let nativeShadow = !(window.ShadyDOM && window.ShadyDOM.inUse);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nexport let nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n// experimental support for native @apply\nfunction detectNativeApply() {\n  let style = document.createElement('style');\n  style.textContent = '.foo { @apply --foo }';\n  document.head.appendChild(style);\n  let nativeCssApply = (style.sheet.cssRules[0].cssText.indexOf('apply') >= 0);\n  document.head.removeChild(style);\n  return nativeCssApply;\n}\n\nexport let nativeCssApply = false && detectNativeApply();\n\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings.shimcssproperties;\n    nativeShadow = nativeShadow && !settings.shimshadow;\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window.WebComponents) {\n  parseSettings(window.WebComponents.flags);\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport {parse, stringify, types} from './css-parse'\n\nexport function toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\nexport function rulesForStyle(style) {\n  if (!style.__cssRules && style.textContent) {\n    style.__cssRules = parse(style.textContent);\n  }\n  return style.__cssRules;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\nexport function isKeyframesSelector(rule) {\n  return rule.parent &&\n  rule.parent.type === types.KEYFRAMES_RULE;\n}\n\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  if (onlyActiveRules) {\n    if (node.type === types.MEDIA_RULE) {\n      let matchMedia = node.selector.match(rx.MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (node.type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    node.type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (node.type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node.rules;\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return target.insertBefore(style, after);\n}\n\nexport function createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode.nextSibling : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n// cssBuildTypeForModule: function (module) {\n//   let dm = Polymer.DomModule.import(module);\n//   if (dm) {\n//     return getCssBuildType(dm);\n//   }\n// },\n//\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n// Walk from text[start] matching parens\n// returns position of the outer end paren\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window.ShadyDOM) {\n    window.ShadyDOM.nativeMethods.setAttribute.call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\nexport let rx = {\n  VAR_ASSIGN: /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,\n  MIXIN_MATCH: /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n  VAR_CONSUMED: /(--[\\w-]+)\\s*([:,;)]|$)/gi,\n  ANIMATION_MATCH: /(animation\\s*:)|(animation-name\\s*:)/,\n  MEDIA_MATCH: /@media[^(]*(\\([^)]*\\))/,\n  IS_VAR: /^--/,\n  BRACKETED: /\\{[^}]*\\}/g,\n  HOST_PREFIX: '(?:^|[^.#[:])',\n  HOST_SUFFIX: '($|[.:[\\\\s>+~])'\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment} from './css-parse'\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport StyleInfo from './style-info'\n\n// TODO: dedupe with shady\nconst p = window.Element.prototype;\nconst matchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n  // decorates styles with rule info and returns an array of used style\n  // property names\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule.rules = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = StyleUtil.rx.VAR_ASSIGN;\n      let cssText = rule.parsedCssText;\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule.parsedCssText);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(StyleUtil.rx.BRACKETED, '')\n      .replace(StyleUtil.rx.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = StyleUtil.rx.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        StyleUtil.rx.MIXIN_MATCH.lastIndex = 0;\n        m = StyleUtil.rx.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule.cssText = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule.cssText;\n    let output = rule.cssText;\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = StyleUtil.rx.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule.cssText = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let hostScope = scope.is ?\n    StyleTransformer._calcHostScope(scope.is, scope.extends) :\n    'html';\n    let parsedSelector = rule.parsedSelector;\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(scope.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules.__cssBuild;\n    StyleUtil.forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let hostSelector = StyleTransformer\n      ._calcHostScope(element.is, element.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(StyleUtil.rx.HOST_PREFIX + rxHostSelector +\n      StyleUtil.rx.HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule.cssText) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule.keyframesName] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n  // Transforms `@keyframes` names to be unique for the current host.\n  // Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule.keyframesName, 'g');\n    rule.transformedKeyframesName = rule.keyframesName + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    rule.selector = rule.transformedSelector.replace(\n        rule.keyframesName, rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule.selector = parts.join(',');\n  }\n\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s._useCount--;\n      if (s._useCount <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style._useCount = style._useCount || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style._useCount++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(style);\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(rule) {\n      let css = rule.cssText = rule.parsedCssText;\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(css);\n        // replace with reified properties, scenario is same as mixin\n        rule.cssText = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nWrapper over <style> elements to co-operate with ShadyCSS\n\nExample:\n<custom-style>\n  <style>\n  ...\n  </style>\n</custom-style>\n*/\n\n'use strict';\n\nlet ShadyCSS = window.ShadyCSS;\n\nlet enqueued = false;\n\nlet customStyles = [];\n\nlet hookFn = null;\n\n/*\nIf a page only has <custom-style> elements, it will flash unstyled content,\nas all the instances will boot asynchronously after page load.\n\nCalling ShadyCSS.updateStyles() will force the work to happen synchronously\n*/\nfunction enqueueDocumentValidation() {\n  if (enqueued) {\n    return;\n  }\n  enqueued = true;\n  if (window.HTMLImports) {\n    window.HTMLImports.whenReady(validateDocument);\n  } else if (document.readyState === 'complete') {\n    validateDocument();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      if (document.readyState === 'complete') {\n        validateDocument();\n      }\n    });\n  }\n}\n\nfunction validateDocument() {\n  requestAnimationFrame(() => {\n    if (enqueued || ShadyCSS._elementsHaveApplied) {\n      ShadyCSS.updateStyles();\n    }\n    enqueued = false;\n  });\n}\n\nclass CustomStyle extends HTMLElement {\n  static get _customStyles() {\n    return customStyles;\n  }\n  static get processHook() {\n    return hookFn;\n  }\n  static set processHook(fn) {\n    hookFn = fn;\n  }\n  static get _documentDirty() {\n    return enqueued;\n  }\n  static findStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (!c._style) {\n        let style = c.querySelector('style');\n        if (!style) {\n          continue;\n        }\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        if (style.__appliedElement) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            style.__appliedElement.setAttribute(attr.name, attr.value);\n          }\n        }\n        c._style = style.__appliedElement || style;\n        if (hookFn) {\n          hookFn(c._style);\n        }\n        ShadyCSS._transformCustomStyleForDocument(c._style);\n      }\n    }\n  }\n  static _revalidateApplyShim() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS._revalidateApplyShim(c._style);\n      }\n    }\n  }\n  static applyStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS._applyCustomStyleToDocument(c._style);\n      }\n    }\n    enqueued = false;\n  }\n  constructor() {\n    super();\n    customStyles.push(this);\n    enqueueDocumentValidation();\n  }\n}\n\nwindow['CustomStyle'] = CustomStyle;\nwindow.customElements.define('custom-style', CustomStyle);","(scope => {\n  'use strict';\n\n  const importForElement = el => {\n    return el.ownerDocument === document ? null : el.ownerDocument;\n  };\n  const whenReady = callback => {\n    // When native imports boot, the are \"ready\" the first rAF after\n    // the document becomes interactive, so wait for the correct state change.\n    if (document.readyState !== 'interactive') {\n      const once = () => {\n        document.removeEventListener('readystatechange', once);\n        window.HTMLImports.whenReady(callback);\n      }\n      document.addEventListener('readystatechange', once);\n    } else {\n      // TODO(sorvell): Ideally `whenReady` should return synchronously\n      // when imports are not pending but this would require a more\n      // robust implementation that should probably be a small complementary\n      // library available via the html-imports polyfill.\n      requestAnimationFrame(callback);\n    }\n  };\n\n  whenReady(() => document.dispatchEvent(new CustomEvent('HTMLImportsLoaded', {\n    cancelable: true,\n    bubbles: true\n  })));\n\n  // export\n  scope.useNative = true;\n  scope.whenReady = whenReady;\n  scope.importForElement = importForElement;\n})(window.HTMLImports = (window.HTMLImports || {}));\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport * as StyleUtil from './style-util'\nimport {nativeShadow} from './style-settings'\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node.__styleScoped) {\n      node.__styleScoped = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element.__cssBuild;\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = (nativeShadow || cssBuildType === 'shady') ?\n    StyleUtil.toCssText(styleRules, callback) :\n    this.css(styleRules, element.is, element.extends, callback) + '\\n\\n';\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? '[is=' +  scope + ']' : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  // transforms a css rule to a scoped rule.\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule.selector = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule.selector.split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule.selector = rule.parsedSelector;\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  normalizeRootSelector(rule) {\n    if (rule.selector === ROOT) {\n      rule.selector = 'html';\n    }\n  }\n\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nexport default new StyleTransformer()","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport default {};\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport templateMap from './template-map'\n\nconst promise = Promise.resolve();\n\nexport default class StyleInfo {\n  static get(node) {\n    return node.__styleInfo;\n  }\n  static set(node, styleInfo) {\n    node.__styleInfo = styleInfo;\n    return styleInfo;\n  }\n  static invalidate(elementName) {\n    if (templateMap[elementName]) {\n      templateMap[elementName]._applyShimInvalid = true;\n    }\n  }\n  /*\n  the template is marked as `validating` for one microtask so that all instances\n  found in the tree crawl of `applyStyle` will update themselves,\n  but the template will only be updated once.\n  */\n  static startValidating(elementName) {\n    const template = templateMap[elementName];\n    if (!template._validating) {\n      template._validating = true;\n      promise.then(() => {\n        template._applyShimInvalid = false;\n        template._validating = false;\n      });\n    }\n  }\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    this.styleRules = ast || null;\n    this.placeholder = placeholder || null;\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    this.overrideStyleProperties = null;\n    this.elementName = elementName || '';\n    this.cssBuild = cssBuild || '';\n    this.typeExtension = typeExtension || '';\n    this.styleProperties = null;\n    this.scopeSelector = null;\n    this.customStyle = null;\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util'\nimport {nativeShadow} from './style-settings'\n\nlet placeholderMap = {};\n\nconst ce = window.customElements;\nif (ce && !nativeShadow) {\n  const origDefine = ce.define;\n  ce.define = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(ce, name, clazz, options);\n  };\n}\n\nexport default placeholderMap;\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    @apply --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {rx, forEachRule, processVariableAndFallback, rulesForStyle} from './style-util'\nimport templateMap from './template-map'\nimport StyleInfo from './style-info'\n\nlet MIXIN_MATCH = rx.MIXIN_MATCH;\nlet VAR_ASSIGN = rx.VAR_ASSIGN;\n\nlet APPLY_NAME_CLEAN = /;\\s*/m;\nlet INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nlet MIXIN_VAR_SEP = '_-_';\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    this._map = {};\n  }\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  get(name) {\n    name = name.trim();\n    return this._map[name];\n  }\n}\n\nclass ApplyShim {\n  constructor() {\n    this._currentTemplate = null;\n    this._measureElement = null;\n    this._map = new MixinMap();\n    this._separator = MIXIN_VAR_SEP;\n    this._boundProduceCssProperties = (\n      matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText, propertyName, valueProperty, valueMixin);\n  }\n  // return true if `cssText` contains a mixin definition or consumption\n  detectMixin(cssText) {\n    const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n    // reset state of the regexes\n    MIXIN_MATCH.lastIndex = 0;\n    VAR_ASSIGN.lastIndex = 0;\n    return has;\n  }\n  transformStyle(style, elementName) {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    return ast;\n  }\n  transformRules(rules, elementName) {\n    this._currentTemplate = templateMap[elementName];\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentTemplate = null;\n  }\n  transformRule(rule) {\n    rule.cssText = this.transformCssText(rule.parsedCssText);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule.selector === ':root') {\n      rule.selector = ':host > *';\n    }\n  }\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, this._boundProduceCssProperties);\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = document.createElement('meta');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  // replace mixin consumption with variable consumption\n  _consumeCssProperties(text) {\n    let m;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = [textBeforeApply, replacement, textAfterApply].join('');\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  // produce variable consumption at the site of mixin consumption\n  // @apply --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n  // Example:\n  // border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentTemplate) {\n        mixinEntry.dependants[this._currentTemplate.name] = this._currentTemplate;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = ApplyShim._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  // \"parse\" a mixin definition into a map of properties and values\n  // cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  _invalidateMixinEntry(mixinEntry) {\n    for (let elementName in mixinEntry.dependants) {\n      if (!this._currentTemplate || elementName !== this._currentTemplate.name) {\n        StyleInfo.invalidate(elementName);\n      }\n    }\n  }\n\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = '@apply ' + value + ';';\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(propertyName + MIXIN_VAR_SEP + p + ': ' + v);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = matchText + ';' + prefix;\n    }\n    return prefix + out.join('; ') + ';';\n  }\n}\n\nlet applyShim = new ApplyShim();\nwindow['ApplyShim'] = applyShim;\nexport default applyShim;\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\n\nexport let flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof SVGElement && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer.SCOPE_NAME) < 0)));\n  }\n\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = root.host;\n            if (host) {\n              let scope = host.is || host.localName;\n              StyleTransformer.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = mxn.removedNodes[i];\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window.customElements &&\n    !window.customElements.flush);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window.HTMLImports) {\n      window.HTMLImports.whenReady(delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse} from './css-parse'\nimport {nativeShadow, nativeCssVariables, nativeCssApply} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport StyleProperties from './style-properties'\nimport templateMap from './template-map'\nimport placeholderMap from './style-placeholder'\nimport StyleInfo from './style-info'\nimport StyleCache from './style-cache'\n\n// TODO(dfreedm): consider spliting into separate global\nimport ApplyShim from './apply-shim'\nimport {flush as watcherFlush} from './document-watcher'\n\nlet styleCache = new StyleCache();\n\nclass ShadyCSS {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo({rules: []}));\n    this._elementsHaveApplied = false;\n  }\n  get nativeShadow() {\n    return nativeShadow;\n  }\n  get nativeCss() {\n    return nativeCssVariables;\n  }\n  get nativeCssApply() {\n    return nativeCssApply;\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!this.nativeShadow) {\n      StyleTransformer.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    let hasMixins = ApplyShim.detectMixin(cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && this.nativeCss && !this.nativeCssApply) {\n      ApplyShim.transformRules(ast, elementName);\n    }\n    template._styleAst = ast;\n\n    let ownPropertyNames = [];\n    if (!this.nativeCss) {\n      ownPropertyNames = StyleProperties.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || this.nativeCss) {\n      let root = this.nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer.elementStyles(info, rules);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let is = host.getAttribute('is') || host.localName;\n    let typeExtension;\n    if (is !== host.localName) {\n      typeExtension = host.localName;\n    }\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  applyStyle(host, overrideProps) {\n    let is = host.getAttribute('is') || host.localName;\n    let styleInfo = StyleInfo.get(host);\n    let hasApplied = Boolean(styleInfo);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (window.CustomStyle) {\n      let CS = window.CustomStyle;\n      if (CS._documentDirty) {\n        CS.findStyles();\n        if (!this.nativeCss) {\n          this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n        } else if (!this.nativeCssApply) {\n          CS._revalidateApplyShim();\n        }\n        CS.applyStyles();\n        // if no elements have booted yet, we can just update the document and be done\n        if (!this._elementsHaveApplied) {\n          return;\n        }\n        // if no native css custom properties, we must recalculate the whole tree\n        if (!this.nativeCss) {\n          this.updateStyles();\n          /*\n          When updateStyles() runs, this element may not have a shadowroot yet.\n          If not, we need to make sure that this element runs `applyStyle` on itself at least once to generate a style\n          */\n          if (hasApplied) {\n            return;\n          }\n        }\n      }\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (this.nativeCss) {\n      if (styleInfo.overrideStyleProperties) {\n        this._updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._applyShimInvalid && template._style) {\n        // update template\n        if (!template._validating) {\n          ApplyShim.transformRules(template._styleAst, is);\n          template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          StyleInfo.startValidating(is);\n        }\n        // update instance if native shadowdom\n        if (this.nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    } else {\n      this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    }\n    if (hasApplied) {\n      let root = this._isRootOwner(host) ? host : host.shadowRoot;\n      // note: some elements may not have a root!\n      if (root) {\n        this._applyToDescendants(root);\n      }\n    }\n  }\n  _applyToDescendants(root) {\n    // note: fallback to childNodes to support recursing into SVG which\n    // does not support children in some browsers (Edge/IE)\n    let c$ = root.children || root.childNodes;\n    for (let i = 0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (c.shadowRoot) {\n        this.applyStyle(c);\n      }\n      this._applyToDescendants(c);\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = host.getAttribute('is') || host.localName;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!this.nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  _updateNativeProperties(element, properties) {\n    // remove previous properties\n    for (let p in properties) {\n      // NOTE: for bc with shim, don't apply null values.\n      if (p === null) {\n        element.style.removeProperty(p);\n      } else {\n        element.style.setProperty(p, properties[p]);\n      }\n    }\n  }\n  updateStyles(properties) {\n    this.applyStyle(this._documentOwner, properties);\n  }\n  /* Custom Style operations */\n  _transformCustomStyleForDocument(style) {\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (this.nativeCss && !this.nativeCssApply) {\n        ApplyShim.transformRule(rule);\n      }\n    });\n    if (this.nativeCss) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (this.nativeCss && !this.nativeCssApply) {\n      let ast = StyleUtil.rulesForStyle(style);\n      ApplyShim.transformRules(ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  _applyCustomStyleToDocument(style) {\n    if (!this.nativeCss) {\n      StyleProperties.applyCustomStyle(style, this._documentOwnerStyleInfo.styleProperties);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!this.nativeCss) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!this.nativeCss) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\nwindow['ShadyCSS'] = new ShadyCSS();","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n  HTMLImports.whenReady(function() {\r\n    requestAnimationFrame(function() {\r\n      window.dispatchEvent(new CustomEvent('WebComponentsReady'));\r\n    });\r\n  });\r\n})();\r\n"]}